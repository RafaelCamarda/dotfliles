# class CsrValidator < ActiveModel::Validator
#   CSR_ERRORS = {
#     organization_missing: '-42',
#     challenge_password: '-43',
#     invalid_domain: '-44',
#     address_missing: '-45',
#     parameter_missing: '-102',
#     csr_invalid: '-4007',
#     general_error: '-66'
#   }.freeze

  CHALLENGE_PASSWORD = 'challengePassword'.freeze

  def validate(model)
    @csr_request = OpenSSLRequestAdapter.new(model.csr)
    @model = model
    validate_csr_structure
    validate_csr_key_length
    validate_organization
    validate_domain
    validate_address
    validate_challenge_password
  end

  private

  attr_reader :csr_request, :model

  def validate_csr_structure
    return if model.errors.any?
    add_error(:parameter_missing) unless csr_request.verify
  rescue OpenSSL::X509::RequestError
    add_error(:general_error)
  end

  def validate_csr_key_length
    return if model.errors.any?
    add_error(:csr_invalid) unless valid_key_length?
  end

  def validate_organization
    return if model.errors.any?
    add_error(:organization_missing) if decoded_csr.organization.blank?
  end

  def validate_address
    return if model.errors.any?
    add_error(:address_missing) if missing_address_fields?
  end

  def validate_challenge_password
    return if model.errors.any?
    add_error(:challenge_password) if challenge_password?
  end

  def validate_domain
    return if model.errors.any?
    add_error(:invalid_domain) unless valid_domain?
  end

  def decoded_csr
    csr_request.decoded_csr
  end

  def missing_address_fields?
    decoded_csr.country.blank? ||
      decoded_csr.state.blank? ||
      decoded_csr.city.blank?
  end

  def valid_key_length?
    csr_request.key_size >=
      Rails.application.config.global_sign['key_required_length']
  end

  def valid_domain?
    decoded_csr.common_name.present? && !decoded_csr.common_name.match(/\s/)
  end

  def challenge_password?
    csr_request.attributes.present? &&
      csr_request.attributes.any? { |a| a.oid == CHALLENGE_PASSWORD }
  end

  def add_error(error_key)
    model.errors.add(:base, CSR_ERRORS[error_key])
  end
end
