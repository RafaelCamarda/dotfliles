class ApplicationController < ActionController::Base
  include MetruxMeter
asssssssssssssssssssss
  protect_from_forgery with: :exception

  before_action :cas_authenticated

  SSL_ROLE = {
    ssl_full_access: 'SSL-PANEL_IMPERSONATE_FULL_ACCESS'.downcase
  }.freeze

  def customer_restriction
    render :permission_denied unless customer?
  end

  def impersonate_restriction
    render :permission_denied unless impersonate?
  end

  def role_authorized?
    authorities.include?(SSL_ROLE[:ssl_full_access])
  end

  def authorities
    cas_extra_attr['authorities']
      .to_s
      .downcase
      .gsub(/\[|\]/, '')
      .split(',')
      .map(&:strip)
  end

  # Internal: Verify if user is authenticated at CAS.
  #
  # If the user is not authenticated,
  # halt the execution with `:unauthorized` HTTP header
  def cas_authenticated
    head :unauthorized unless session_cas && session_cas['user']
  end

  def fetch_customer
    @customer ||= CustomerAPI::Customer.find(cas_extra_attr['cn'])
  rescue CustomerAPI::CustomerNotFound
    nil
  end
  helper_method :fetch_customer, :impersonate?

  def impersonate?
    session[:impersonate]
  end

  private

  def session_cas
    session.fetch(:cas, {})
  end

  def customer?
    fetch_customer
  end

  def cas_extra_attr
    @cas_extra_attr ||= session_cas
                        .fetch('extra_attributes', {})
  end
end
