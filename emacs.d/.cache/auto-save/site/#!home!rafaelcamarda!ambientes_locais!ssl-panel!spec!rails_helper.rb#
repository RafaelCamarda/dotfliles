# This file is copied to spec/ when you run 'rails generate rspec:install'
ENV['RAILS_ENV'] ||= 'test'
require 'simplecov'
SimpleCov.start 'rails'
require File.expand_path('../../config/environment', __FILE__)
# Prevent database truncation if the environment is production
abort("The Rails environment is running in production mode!") if Rails.env.production?
require 'spec_helper'
require 'rspec/rails'
require 'capybara/rspec'
require 'capybara/poltergeist'
require 'webmock/rspec'
require 'vcr'
# Add additional requires below this line. Rails is not loaded until this point!

Dir[Rails.root.join('spec/support/**/*.rb')].each { |f| require f }

Capybara.register_driver :poltergeist do |app|
  Capybara::Poltergeist::Driver.new(
    app,
    inspector: true,
    default_max_wait_time: 5
  )
end
Capybara.javascript_driver = :poltergeist

VCR.configure do |c|
  c.ignore_localhost = true
  c.cassette_library_dir = 'spec/fixtures/vcr_cassettes'
  c.hook_into :webmock
  c.default_cassette_options[:record] = :new_episodes if ENV['NEW_EPISODES']
  c.configure_rspec_metadata!
end

RSpec.configure do |config|
  config.include FactoryGirl::Syntax::Methods
  config.infer_spec_type_from_file_location!
  config.filter_rails_from_backtrace!
  config.include AuthenticationHelper
  config.around(:each, :vcr) { |example| handle_vcr(example) }
  config.before{ Cassette::Client.cache.backend.clear }
end

Shoulda::Matchers.configure do |config|
  config.integrate do |with|
    with.test_framework :rspec
    with.library :rails
  end
end

def handle_vcr(example)
  return run_with_http_interaction(&example) if ENV['VCR_OFF']

  default_match_on = VCR.configuration
                        .default_cassette_options[:match_requests_on]
  match_on = example.metadata[:match_requests_on] || default_match_on

  name = example.metadata[:cassette] || cassette_name(example)

  VCR.use_cassette(name, match_requests_on: match_on, &example)
end

def cassette_name(example)
  example
    .metadata[:full_description]
    .strip
    .underscore
    .tr('#', '/')
end

Cassette::Client.cache.backend = ActiveSupport::Cache::NullStore.new
